(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{600:function(e,t,s){"use strict";s.r(t);var a=s(7),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"clojure-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clojure-syntax"}},[e._v("#")]),e._v(" Clojure Syntax")]),e._v(" "),s("TagLinks"),e._v(" "),s("blockquote",[s("p",[e._v("How to define/declare global variables with in namespaces?")])]),e._v(" "),s("p",[s("code",[e._v("def")]),e._v(" block is like Assignment operator "),s("code",[e._v("=")]),e._v(" in other languages")]),e._v(" "),s("blockquote",[s("p",[e._v("What is the difference b/w "),s("code",[e._v("let")]),e._v(" and "),s("code",[e._v("def")]),e._v("?")])]),e._v(" "),s("p",[e._v("The syntax for them is different, even if the meanings are related.")]),e._v(" "),s("p",[s("code",[e._v("let")]),e._v(" takes a "),s("strong",[e._v("list of bindings")]),e._v(' (name value pairs) followed by expressions to evaluate in the context of those binding. let binds symbols to values in a "lexical scope"')]),e._v(" "),s("p",[s("code",[e._v("def")]),e._v(" just takes one binding, not a list, and adds it to the global context.")]),e._v(" "),s("blockquote",[s("p",[e._v("How to use docs on REPL?")])]),e._v(" "),s("div",{staticClass:"language-lisp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lisp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("require")]),e._v(" '"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("clojure.repl "),s("span",{pre:!0,attrs:{class:"token lisp-property property"}},[e._v(":refer")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token lisp-property property"}},[e._v(":all")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[s("code",[e._v("doc")]),e._v(", "),s("code",[e._v("find-doc")]),e._v(", "),s("code",[e._v("apropos")]),e._v(", "),s("code",[e._v("source")]),e._v(", and "),s("code",[e._v("dir")])]),e._v(" "),s("blockquote",[s("p",[e._v("What is underscore in reframe?")])]),e._v(" "),s("p",[e._v("The underscore is the universal ignore symbol. Its a valid symbol indentifier")]),e._v(" "),s("div",{staticClass:"language-lisp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lisp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("_ 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token car"}},[e._v("println")]),e._v(" _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("Footer")],1)}),[],!1,null,null,null);t.default=n.exports}}]);